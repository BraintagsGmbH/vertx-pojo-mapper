/*
 * #%L
 * vertx-pojo-mapper-common
 * %%
 * Copyright (C) 2015 Braintags GmbH
 * %%
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * #L%
 */
/**
 * == vertx pojo mapper common - Map Java objects into datastores and back
 * 
 * This module contains common interfaces and default implementations for pojo mapper.
 *
 * To use this project, add the following dependency to the _dependencies_ section of your build descriptor:
 *
 * * Maven (in your `pom.xml`):
 *
 * [source,xml,subs="+attributes"]
 * ----
 * <dependency>
 *   <groupId>de.braintags</groupId>
 *   <artifactId>vertx-pojo-mapper</artifactId>
 *   <version>{maven-version}</version>
 * </dependency>
 * ----
 *
 * * Gradle (in your `build.gradle` file):
 *
 * [source,groovy,subs="+attributes"]
 * ----
 * compile {maven-groupId}:{maven-artifactId}:{maven-version}
 * ----
 *
 * == Basic concepts
 * 
 * tbd
 * Describe {@link de.braintags.io.vertx.pojomapper.typehandler.ITypeHandler}, {@link de.braintags.io.vertx.pojomapper.mapping.IMapper}, {@link de.braintags.io.vertx.pojomapper.mapping.IField},
 * and the general mapping process
 * There is no need to start a mapping of a Java class, the mapping is automatically performed at the moment, when it is needed. 
 * 
 * == Working with vertx-pojo-mapper
 * 
 * === Mapping of Java classes
 * There is no need to start a special mapping process in your application. The mapping of Java classes is automatically performed at the
 * moment, when it is needed.
 * During the mapping process the class is inspected for several information. The persistent fields of a mapper are generated by inspecting
 * public fields and BeanProperties. The rest of the configuration of a mapper is done by using annotations.
 * 
 * [source,java]
 * ----
 * include::{$sourcedirectory}/../../../java/examples/mapper/SimpleMapper.java[]
 * ----
 * 
 * 
 * 
 * === Initializing an IDataStore 
 * The initialization of the {@link de.braintags.io.vertx.pojomapper.IDataStore} is the only action, where you
 * are directly referring to a concrete implementation. 
 * See https://github.com/BraintagsGmbH/vertx-pojo-mapper/blob/master/vertx-pojongo/src/main/asciidoc/java/index.adoc[vertx-pojongo] 
 * to initialize an {@link de.braintags.io.vertx.pojomapper.IDataStore} which works with MongoDB.
 * 
 * 
 * [source,java]
 * ----
 * {@link examples.Examples#example1(io.vertx.core.Vertx )}
 * ----
 * 
 * === Saving data
 * 
 * === Searching data
 * 
 * === Deleting data
 * 
 * == Creating a new implementation 
 * tbd
 *
 * @author Michael Remme
 */
@Document(fileName = "index.adoc")
@GenModule(name = "vertx-pojo-mapper-common", groupPackageName = "de.braintags")
package de.braintags.io.vertx.pojomapper;

import io.vertx.codegen.annotations.GenModule;
import io.vertx.docgen.Document;

