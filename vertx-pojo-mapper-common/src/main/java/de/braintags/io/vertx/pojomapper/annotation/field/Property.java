/*
 * #%L
 * vertx-pojo-mapper-common
 * %%
 * Copyright (C) 2017 Braintags GmbH
 * %%
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * #L%
 */
package de.braintags.io.vertx.pojomapper.annotation.field;

import java.lang.annotation.Documented;
import java.lang.annotation.ElementType;
import java.lang.annotation.Inherited;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;

import de.braintags.io.vertx.pojomapper.IDataStore;
import de.braintags.io.vertx.pojomapper.mapping.datastore.IColumnHandler;

/**
 * With this annotation one can specify, how a field shall be stored inside the {@link IDataStore}
 * 
 * @author Michael Remme
 * 
 */

@Documented
@Inherited
@Retention(RetentionPolicy.RUNTIME)
@Target(ElementType.FIELD)
public @interface Property {
  public static final String UNDEFINED_COLUMN_NAME = "";
  public static final String UNDEFINED_COLUMN_TYPE = "";
  public static final int UNDEFINED_INTEGER = -1;

  /**
   * Specifies the name of the field in the {@link IDataStore}. If undefined, then the name of the field in the POJO
   * will be used
   * 
   * @return the name or empty String if undefined
   */
  String value() default UNDEFINED_COLUMN_NAME;

  /**
   * Set the column nullable ( allow null ). Default = true
   * 
   * @return true, if nullable
   */
  boolean nullable() default true;

  /**
   * With this property you are able to override the column type, which is generated by the choosen driver. WARNING: by
   * using this property, changes from one driver to another might cause indifferent problems
   * 
   * @return
   */
  String columnType() default UNDEFINED_COLUMN_TYPE;

  /**
   * Defines the length of a column inside the datastore. Default = UNDEFINED_INTEGER. If the value is undefined, it
   * will be defined by the {@link IColumnHandler}
   * 
   * @return the length
   */
  int length() default UNDEFINED_INTEGER;

  /**
   * Defines the decimal precision of numeric values. Default = UNDEFINED_INTEGER, If the value is UNDEFINED_INTEGER,
   * then the default value will be taken from the {@link IColumnHandler}
   * 
   * @return the precision
   */
  int precision() default UNDEFINED_INTEGER;

  /**
   * Defines the scale of numeric values. Default = UNDEFINED_INTEGER. If the value is UNDEFINED_INTEGER, then the
   * default value will be taken from the {@link IColumnHandler}
   * 
   * @return the scale
   */
  int scale() default UNDEFINED_INTEGER;

}
